#!/bin/bash
#####################################################################
# Script Name  : hb-archive (Version 1.0.2)
# Description  : archive HomeBank 5.2.3 backup files from the previous month
# Dependencies : case, cat, clear, date, find, zip
# Arguments    : none
# Author       : Richard Romig, 30 March 2019
# Email        : rick.romig@gmail.com
# Comments     : Run on the last date of the month!
#              : Script will not run prior to the 21st day of the month.
# The leapyear function is adpated from a nixCraft shell script,
# Copyright (c) 2005 nixCraft project <http://cyberciti.biz/fb/>, licensed under
# GNU GPL version 2.0 or above.
# The original leapyear script is part of nixCraft shell script collection (NSSC)
# Visit http://bash.cyberciti.biz/ for more information.
#####################################################################
# Copyright (C) 2019, Richard B. Romig
# Email: rick.romig@gmail.com
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>.


## Functions

# Display info page
hba_info () {
  clear
  cat << _EOF_

$scriptname, $version

$progname is a script to create a monthly archive of backup files created
by Maxime Doyen's HomeBank program. <http://homebank.free.fr>

I've used this script with HomeBank version 5.2.3  and later but it should work
with any version of HomeBank that creates a daily backup with the .bak extension
on any Linux system based on Debian or Ubuntu.

The script is intended to be run on the last day of the month to archive the
previous month's backup files. For instance, running the script on March 31
archives February's backup files. However, the script can be forced to run as
early as the 21st of the month.

Backup (*.bak) files in the ~/Documents/HomeBank directory dated prior the first
day of the current calendar month are moved into a compressed archive file for
the prior month in an archive folder. If there are no backup files in the backup
folder, no archive file is created and the script exits.

The archive subdirectory is created under ~/Documents/HomeBank if it doesn't
already exist.

The only command line arguments allowed are '--info' to display this info page
or --version to dipslay version information. Any other arguments are reported
as errors.

Please review the README.md, LICENSE, and WARRANTY in the downloaded ZIP archive
for more information. They can also be reviewed in my repository at:
https://github.com/RickRomig/homebankarchive

By Richard Romig (GNU/General Public License version 2.0)

_EOF_
}

# Show version information

hba_version () {
  clear
  cat << _EOF_
$scriptname $version, dated $lastedited
Copyright $copyright
$progname is a script to create an end of the month archive of backup
files created by Maxime Doyen's HomeBank program. <http://homebank.free.fr>"
_EOF_
}

# Determine if it's a leap year

leapyear () {
  year=$(date +"%Y")
  isleap=0     # 0 = not a leap year, 1 = a leap year

  if [ $(( year % 4 )) -ne 0 ] ; then
      : #  not a leap year : means do nothing and use old value of isleap
   elif [ $(( year % 400 )) -eq 0 ] ; then
      # yes, it's a leap year
      isleap=1
   elif [ $(( year % 100 )) -eq 0 ] ; then
      : # not a leap year do nothing and use old value of isleap
   else
      # it is a leap year
      isleap=1
   fi
   return $isleap
}

# Check to see if it's the last day of the month

checkdate () {

  month=$(date +"%b")
  today=$(date +"%d")

  # Check if current year is a leap year
  leapyear
  leap=$?

  flag=1	# 0 = run script, 1 or 2 = don't run script

  case $month in
    Feb)  if (( leap == 0 )); then
            [ "$today" -eq "28" ] && flag=0
          else
            [ "$today" -eq "29" ] && flag=0
          fi
          ;;
    Apr|Jun|Sep|Nov)  [ "$today" -eq "30" ] && flag=0 ;;
    *)  [ "$today" -eq "31" ] && flag=0 ;;
  esac

  # If not the last day of the month, check if it's too early to archive

  if (( flag == 1 )) && (( today < 21 )); then
    :	# do nothing
  elif (( flag == 1 )) && (( today >= 21 )); then
    echo "$month $today is not the end of the month."
    read -rp "Do you still wish to archive last month's backup files? [yN] " yn
    case $yn in
      [Yy]*)  flag=0 ;;	# Run the script
      *)      flag=2 ;;	# Script canceled by user
    esac
  fi

  return "$flag"
}

## Variables

user=$USER
scriptname=$(basename "$0")
progname="HomeBank Archive"
version="v1.1.1"
lastedited="2019-08-21"
copyright="(c) 2019, Richard Romig"

# Store the directory where script was launched
curdir=$PWD

# Homebank Directory Change after testing Change to HomeBank
hbdir="/home/$user/Documents/HomeBank"

# Set initial value of runflag to 1 (not okay to run archive)
runflag=1

# Previous month
prevmonth=$(date -d "$(date +%Y-%m-01) - 1 day" +"%B %Y")

# Set reference date to the first day of the current month
refdate=$(date -d "$(date +%Y-%m-01)" +%m%d%Y)

# Create filename for previous month archive file
hbarchive=$(date -d "$(date +%Y-%m-01) - 1 day" +%Y-%m)-backup.zip

# Execution

# Check arguments

if [ "$1" == "--info" ]; then
  hba_info
  exit
elif [ "$1" == "--version" ]; then
  hba_version
  exit
elif [ -n "$1" ]; then
  echo -e "\e[1;41mError: Invalid argument.\e[0m" >&2
  echo -e "\e[1;33mOnly '--info' and '--version' are acceptable arguments.\e[0m" >&2
  exit 1
fi

clear
echo $'\n'$"*********************************************************"
echo "$progname $version"
echo "Copyright (c) 2019, Richard Romig"
echo "Licensed under the GNU/General Public License version 2.0"
echo "*********************************************************"

checkdate
runflag=$?

if (( runflag == 1 )); then
  echo "$month $today is too early in the month to archive last month's backup files."
  echo "The archive operation has been canceled by the script."
  exit
elif (( runflag == 2 )); then
  echo $'\n'$"The archive operation has been canceled by the user."
  exit
fi

# Go to the HomeBank directory from wherever you are if you're not already there

[ "$curdir" != "$hbdir" ] && pushd "$hbdir" > /dev/null

# Create the archive folder if it doesn't already exist

[ -d "$hbdir/archive" ] || mkdir -p "$hbdir/archive"

# Count number of files avaailable to be archived

nbu=$(find . -maxdepth 1 -type f -name \*.bak -mtime +33 | wc -l)
if (( nbu <= 0 )); then
  echo "No backup files for $prevmonth available to be archived."
  exit
fi

# Archive previous month's backup files

echo $'\n'$"Archiving $prevmonth HomeBank backup files ..."

if zip -mtt "$refdate" "archive/$hbarchive" ./*.bak 2>/dev/null
then
  echo "HomeBank backup files for $prevmonth archived."
  echo "HomeBank Archives:"
  ls -1 archive/
else
  status=$?
  echo "No backup files for $prevmonth available to be archived."
  echo "Zip Error Code: $status" >&2
fi

# Go back to where you started

[ "$curdir" != "$hbdir" ] && popd > /dev/null

exit

